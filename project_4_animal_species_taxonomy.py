# -*- coding: utf-8 -*-
"""Project 4 - Animal Species Taxonomy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VdxK2B2LLieQHceWVwY5I7jm0_wG0Aev
"""

#----------------------------------------
#  CSC 315 / 615 Spring 2023
#  Project 4 Animal Species Taxonomy
#
#  <<Chris Eagar>>
#----------------------------------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import bisect

#------------------------------------------
# The TaxonomyNode class
#------------------------------------------

class TaxonomyNode:
  def __init__(self, name, category):
    self.name = name
    self.category = category
    self.children = []

  def __lt__(self, other):
    return self.name < other.name

  def __eq__(self, other):
    return self.name == other.name

  def addChild(self, name, category):
    child = TaxonomyNode(name, category)
    child.parent = self
    bisect.insort(self.children, child)

  def hasChild(self, name, category):
    for child in self.children:
      if child.name == name and child.category == category:
        return True
    return False

  def getChild(self, name, category):
    for child in self.children:
      if child.name == name and child.category == category:
        return child
    return None

#------------------------------------------
# The TaxonomyTree class
#------------------------------------------

class TaxonomyTree:
  def __init__(self):
    self.root = TaxonomyNode("", "")

  def addSpecies(self, names, categories):
    current = self.root
    for name, category in zip(names, categories):
      if not current.hasChild(name, category):
        current.addChild(name, category)
      current = current.getChild(name, category)

  @staticmethod
  def print_internal(node, number_str, name_str):
    if not hasattr(TaxonomyTree.print_internal, 'line_number'):
      TaxonomyTree.print_internal.line_number = 1

    if node.name != "":
      name_str = name_str + node.name + '.'
      print(f"{TaxonomyTree.print_internal.line_number:<10}{'.'.join(number_str):<30}{name_str}")
      TaxonomyTree.print_internal.line_number += 1
    number_str.append("0")
    for i, child in enumerate(node.children):
      number_str[-1] = str(i+1)
      TaxonomyTree.print_internal(child, number_str, name_str)
    number_str.pop()
    return TaxonomyTree.print_internal.line_number;

  def print(self):
    TaxonomyTree.print_internal(self.root, [], "")

  # Extra Credit
  @staticmethod
  def listScientificNames_internal(node):
    names = []
    for child in node.children:
      if not child.children:
        names.append(child.name)
      else:
        names.extend(TaxonomyTree.listScientificNames_internal(child))
    return names

  def printScientificNames(self):
    names = TaxonomyTree.listScientificNames_internal(self.root)
    names.sort()
    for name in names:
      print(name)

#------------------------------------------
# Main code
#   Do not Modify
#------------------------------------------

# Read the Pandas dataframe
df = pd.read_csv("taxonomy.csv")
rows = df.shape[0]
cols = df.shape[1]
categories = list(df.columns)[1:cols]

# Construct a Taxonomy Tree
tree = TaxonomyTree()

# Insert species into the tree row by row
for r in range(rows):
  names = list(df.iloc[r,1:cols])
  tree.addSpecies(names,categories)

# Print the contents of the TaxonomyTree
tree.print()

# Extra Credit: print all scientific names in alphabetical order
tree.printScientificNames()